[[elasticsearch-get-started]]
= Get started

// :description: Get started with {es3} in a few steps
// :keywords: serverless, elasticsearch, getstarted, overview

preview:[]

Follow along to set up your {es} project and get started with some sample documents.
Then, choose how to continue with your own data.

[discrete]
[[elasticsearch-get-started-create-project]]
== Create project

Use your {ecloud} account to create a fully-managed {es} project:

. Navigate to {ess-console}[cloud.elastic.co] and create a new account or log in to your existing account.
. Within **Serverless Projects**, choose **Create project**.
. Choose the {es} project type.
. Select a **configuration** for your project, based on your use case.
+
** **General purpose**. For general search use cases across various data types.
** **Optimized for Vectors**. For search use cases using vectors and near real-time retrieval.
. Provide a name for the project and optionally edit the project settings, such as the cloud platform <<regions,region>>.
Select **Create project** to continue.
. Once the project is ready, select **Continue**.

include::../partials/minimum-vcus-detail.asciidoc[]

[discrete]
[[elasticsearch-get-started-create-index]]
== Create an index

Once your project is set up, you'll be directed to a page where you can create your first index. 
An index is where documents are stored and organized, making it possible to search and retrieve data.

. Enter a name for your index.
. Click *Create my index*. You can also create the index by clicking on *Code* to view and run code examples through the command line.
+
image::images/get-started-create-an-index.png[Create an index.]

. You’ll be directed to the *Index Management* page. Here, copy and save the following:
- Elasticsearch URL
- API key

[NOTE]
====
You won’t be able to view this API key again. If needed, refer to <<elasticsearch-create-new-api-key,Create a new API key>> to generate a new one.
====

[discrete]
[[elasticsearch-get-started-ingest-data]]
== Ingest data

The UI provides ready-to-use code examples for ingesting data via the REST API. Choose your preferred tool for making these requests:
* Elastic Console in your project's UI
* Python 
* JavaScript 
* cURL
If you'd prefer to upload a file using the UI, refer to <<elasticsearch-ingest-data-file-upload>>.

In this section, we walk you through the ingest process using the Console.

. Click *Run in Console*.
. Run the first API call to create the index mapping.
+
[source,console]
----
PUT /search-test/_mapping
{
  "properties": {
    "vector": {
      "type": "dense_vector",
      "dims": 3
    },
    "text": {
      "type": "text"
    }
  }
}
----

. Run the second API call to ingest documents.

[source,json]
----
POST /_bulk?pretty
{ "index": { "_index": "search-test" } }
{"vector":[2.542,5.807,9.735],"text":"Example text 1"}
{ "index": { "_index": "search-test" } }
{"vector":[5.879,8.179,9.932],"text":"Example text 2"}
{ "index": { "_index": "search-test" } }
{"vector":[6.534,7.155,3.236],"text":"Example text 3"}
----

[discrete]
[[elasticsearch-get-started-search-data]]
== Search data

To search, send a `POST` request to the `_search` endpoint, specifying the index to search.

Run the following command to search the `search-test` index for documents containing `Example` in the text field:

[source,bash]
----
POST /search-test/_search?pretty
{
  "query": {
    "match": {
      "text": "Example"
    }
  }
}
----

This query will use the match query, which is designed to search for full-text fields.

You should receive a response that includes the documents matching your search term. 
Here’s an example of what the response might look like:

[source,json]
----
{
  "took": 6,
  "timed_out": false,
  "_shards": {
    "total": 3,
    "successful": 3,
    "skipped": 0,
    "failed": 0
  },
  "hits": {
    "total": {
      "value": 3,
      "relation": "eq"
    },
    "max_score": 0.2876821,
    "hits": [
      {
        "_index": "search-test",
        "_id": "NJZmIJMBSZbIKcD1sOUO",
        "_score": 0.2876821,
        "_source": {
          "vector": [
            2.352,
            4.133,
            1.718
          ],
          "text": "Example text 2"
        }
      },
      {
        "_index": "search-test",
        "_id": "M5ZmIJMBSZbIKcD1sOUO",
        "_score": 0.18232156,
        "_source": {
          "vector": [
            6.407,
            1.821,
            0.404
          ],
          "text": "Example text 1"
        }
      },
      {
        "_index": "search-test",
        "_id": "NZZmIJMBSZbIKcD1sOUO",
        "_score": 0.18232156,
        "_source": {
          "vector": [
            4.959,
            5.986,
            3.873
          ],
          "text": "Example text 3"
        }
      }
    ]
  }
}
----

In this response:

- `hits`: This section contains the matching documents. Each document includes the `_source` field with the original vector and text fields.
- `_score`: This field indicates the relevance score of each document to the search query. A higher score means a closer match.

[discrete]
[[elasticsearch-get-started-continue-on-your-own]]
== Continue on your own

Congratulations!
You've set up an {es} project, and you've ingested and searched some sample data.
Now you're ready to continue on your own.

[discrete]
[[elasticsearch-get-started-explore]]
=== Explore

Want to explore the sample documents or your own data?

By creating a data view, you can explore data using several UI tools, such as Discover or Dashboards. Or, use {es} aggregations to explore your data using the API. Find more information in <<elasticsearch-explore-your-data>>.

[discrete]
[[elasticsearch-get-started-build]]
=== Build

Ready to build your own solution?

To learn more about sending and syncing data to {es}, or the search API and its query DSL, check <<elasticsearch-ingest-your-data>> and <<elasticsearch-http-apis>>.

////
/*
- <DocLink slug="/serverless/elasticsearch/search-your-data" />
- <DocLink slug="/serverless/elasticsearch/search-your-data-the-search-api" />
*/
////
