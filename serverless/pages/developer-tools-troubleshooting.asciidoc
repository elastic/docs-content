[[devtools-dev-tools-troubleshooting]]
= Troubleshooting

// :description: Troubleshoot searches.
// :keywords: serverless, troubleshooting

preview:[]

When you query your data, Elasticsearch may return an error, no search results,
or results in an unexpected order. This guide describes how to troubleshoot
searches.

[discrete]
[[devtools-dev-tools-troubleshooting-ensure-the-data-stream-index-or-alias-exists]]
== Ensure the data stream, index, or alias exists

Elasticsearch returns an `index_not_found_exception` when the data stream, index
or alias you try to query does not exist. This can happen when you misspell the
name or when the data has been indexed to a different data stream or index.

Use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-exists-index-template[**Exists API**] to check whether
a data stream, index, or alias exists:

[source,js]
----
HEAD my-index
----

Use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-get[**Get index API**]
to list all indices and their aliases:

[source,js]
----
GET /_all?filter_path=*.aliases
----

Instead of an error, it is possible to retrieve partial search results if some
of the indices you're querying are unavailable.
Set `ignore_unavailable` to `true`:

[source,js]
----
GET /my-alias/_search?ignore_unavailable=true
----

[discrete]
[[devtools-dev-tools-troubleshooting-ensure-the-data-stream-or-index-contains-data]]
== Ensure the data stream or index contains data

When a search request returns no hits, the data stream or index may contain no
data.
This can happen when there is a data ingestion issue.
For example, the data may have been indexed to a data stream or index with
another name.

Use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-count-1[**Count API**]
to retrieve the number of documents in a data
stream or index.
Check that `count` in the response is not 0.

[source,js]
----
GET /my-index-000001/_count
----

[NOTE]
====
If you aren't getting search results in the UI, check that you have selected the
correct data view and a valid time range. Also, ensure the data view has been
configured with the correct time field.
====

[discrete]
[[devtools-dev-tools-troubleshooting-check-that-the-field-exists-and-its-capabilities]]
== Check that the field exists and its capabilities

Querying a field that does not exist will not return any results.
Use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-field-caps[**Field capabilities API**]
to check whether a field exists:

[source,js]
----
GET /my-index-000001/_field_caps?fields=my-field
----

If the field does not exist, check the data ingestion process.
The field may have a different name.

If the field exists, the request will return the field's type and whether it is
searchable and aggregatable.

[source,console-response]
----
{
  "indices": [
    "my-index-000001"
  ],
  "fields": {
    "my-field": {
      "keyword": {
        "type": "keyword",           <1>
        "metadata_field": false,
        "searchable": true,          <2>
        "aggregatable": true         <3>
      }
    }
  }
}
----

<1> The field is of type `keyword` in this index.

<2> The field is searchable in this index.

<3> The field is aggregatable in this index.

[discrete]
[[devtools-dev-tools-troubleshooting-check-the-fields-mappings]]
== Check the field's mappings

A field's capabilities are determined by its {ref}/mapping.html[mapping].
To retrieve the mapping, use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-get-mapping[**Get mapping API**]:

[source,js]
----
GET /my-index-000001/_mappings
----

If you query a `text` field, pay attention to the analyzer that may have been
configured.
You can use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-analyze[**Analyze API**]
to check how a field's analyzer processes values and query terms:

[source,js]
----
GET /my-index-000001/_analyze
{
  "field": "my-field",
  "text": "this is a test"
}
----

To change the mapping of an existing field use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-put-mapping-1[**Update mapping API**].

[discrete]
[[devtools-dev-tools-troubleshooting-check-the-fields-values]]
== Check the field's values

Use the `exists` query to check whether there are
documents that return a value for a field.
Check that `count` in the response is
not 0.

[source,js]
----
GET /my-index-000001/_count
{
  "query": {
    "exists": {
      "field": "my-field"
    }
  }
}
----

If the field is aggregatable, you can use <<elasticsearch-explore-your-data-aggregations,aggregations>>
to check the field's values. For `keyword` fields, you can use a `terms`
aggregation to retrieve the field's most common values:

[source,js]
----
GET /my-index-000001/_search?filter_path=aggregations
{
  "size": 0,
  "aggs": {
    "top_values": {
      "terms": {
        "field": "my-field",
        "size": 10
      }
    }
  }
}
----

For numeric fields, you can use {ref}/search-aggregations-metrics-stats-aggregation.html[stats aggregation]   to get an idea of the field's value distribution:

[source,js]
----
GET /my-index-000001/_search?filter_path=aggregations
{
  "aggs": {
    "my-num-field-stats": {
      "stats": {
        "field": "my-num-field"
      }
    }
  }
}
----

If the field does not return any values, check the data ingestion process.
The field may have a different name.

[discrete]
[[devtools-dev-tools-troubleshooting-check-the-latest-value]]
== Check the latest value

For time-series data, confirm there is non-filtered data within the attempted
time range.
For example, if you are trying to query the latest data for the
`@timestamp` field, run the following to see if the max `@timestamp` falls
within the attempted range:

[source,js]
----
GET /my-index-000001/_search?sort=@timestamp:desc&size=1
----

[discrete]
[[devtools-dev-tools-troubleshooting-validate-explain-and-profile-queries]]
== Validate, explain, and profile queries

When a query returns unexpected results, Elasticsearch offers several tools to
investigate why.

The https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-validate-query[**Validate API**]
enables you to validate a query.
Use the `rewrite` parameter to return the Lucene query an Elasticsearch query is
rewritten into:

[source,js]
----
GET /my-index-000001/_validate/query?rewrite=true
{
  "query": {
    "match": {
      "user.id": {
        "query": "kimchy",
        "fuzziness": "auto"
      }
    }
  }
}
----

Use the {ref}/search-explain.html[**Explain API**] to find out why a
specific document matches or doesnâ€™t match a query:

[source,js]
----
GET /my-index-000001/_explain/0
{
  "query" : {
    "match" : { "message" : "elasticsearch" }
  }
}
----

The {ref}/search-profile.html[**Profile API**]
provides detailed timing information about a search request.
For a visual representation of the results, use the
<<devtools-profile-queries-and-aggregations,Search Profiler>>.

[NOTE]
====
To troubleshoot queries, select **Inspect** in the toolbar.
Next, select **Request**.
You can now copy the query sent to {es} for further analysis in Console.
====

[discrete]
[[devtools-dev-tools-troubleshooting-check-index-settings]]
== Check index settings

Index settings
can influence search results.
For example, the `index.query.default_field` setting, which determines the field
that is queried when a query specifies no explicit field.
Use the https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-get-settings[**Get index settings API**]
to retrieve the settings for an index:

[source,bash]
----
GET /my-index-000001/_settings
----

You can update dynamic index settings with the
https://www.elastic.co/docs/api/doc/elasticsearch-serverless/operation/operation-indices-put-settings[**Update index settings API**].
Changing dynamic index settings for a data stream
// <DocLink id="enElasticsearchReferenceModifyDataStreams" section="change-a-dynamic-index-setting-for-a-data-stream">Changing dynamic index settings for a data stream</DocLink>
requires changing the index template used by the data stream.

For static settings, you need to create a new index with the correct settings.
Next, you can reindex the data into that index.

////
/*For data streams, refer to <DocLink id="enElasticsearchReferenceModifyDataStreams" section="change-a-static-index-setting-for-a-data-stream">Change a static index setting
for a data stream</DocLink> */
////
