[[elasticsearch-nodejs-client-getting-started]]
= Get started with the serverless Node.js client

// :description: Set up and use the Node.js client for {es3}.
// :keywords: serverless, elasticsearch, nodejs, how to

preview:[]

[NOTE]
====
This client is for use with {es-serverless} only. See also the https://www.elastic.co/guide/en/elasticsearch/client/index.html[{es} clients]. 
====

This page guides you through the installation process of the Node.js
client for {es3}, shows you how to initialize the client, and how to perform basic
{es} operations with it.

[discrete]
[[elasticsearch-nodejs-client-getting-started-requirements]]
== Requirements

* Node.js 16 or higher installed on your system.

[discrete]
[[elasticsearch-nodejs-client-getting-started-installation]]
== Installation

[discrete]
[[elasticsearch-nodejs-client-getting-started-using-the-command-line]]
=== Using the command line

You can install the Node.js client with the following
commands:

[source,bash]
----
npm install @elastic/elasticsearch-serverless
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-initialize-the-client]]
== Initialize the client

Initialize the client using your API key and {es} endpoint:

[source,js]
----
const { Client } = require('@elastic/elasticsearch-serverless')
const client = new Client({
  node: 'https://', // serverless project URL
  auth: { apiKey: 'your_api_key' }, // project API key
})
----

To get API keys for the URL for a project, see <<elasticsearch-get-started>>.

[discrete]
[[elasticsearch-nodejs-client-getting-started-using-the-api]]
== Using the API

After you've initialized the client, you can start ingesting documents.
You can use the `bulk` API for this.
This API enables you to index, update, and delete several documents in one request.

[discrete]
[[elasticsearch-nodejs-client-getting-started-creating-an-index-and-ingesting-documents]]
=== Creating an index and ingesting documents

You can call the `bulk` helper API with a list of documents and a handler for
what action to perform on each document.

The following is an example of bulk indexing some classic books into the `books`
index:

[source,js]
----
// First we build our data:
const body = [
  {name: "Snow Crash", "author": "Neal Stephenson", "release_date": "1992-06-01", "page_count": 470},
  {name: "Revelation Space", "author": "Alastair Reynolds", "release_date": "2000-03-15", "page_count": 585},
  {name: "1984", "author": "George Orwell", "release_date": "1985-06-01", "page_count": 328},
  {name: "Fahrenheit 451", "author": "Ray Bradbury", "release_date": "1953-10-15", "page_count": 227},
  {name: "Brave New World", "author": "Aldous Huxley", "release_date": "1932-06-01", "page_count": 268},
  {name: "The Handmaid's Tale", "author": "Margaret Atwood", "release_date": "1985-06-01", "page_count": 311}
]

// Then we send the data using the bulk API helper:
const result = await client.helpers.bulk({
  datasource: body,
  onDocument (doc) {
    // instructs the bulk indexer to add each item in `body` to the books index
    // you can optionally inspect each `doc` object to alter what action is performed per document
    return {
      index: { _index: 'books' }
    }
  }
})
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-getting-documents]]
=== Getting documents

You can get documents by using the following code:

[source,js]
----
await client.get({
  index: 'books',
  id: 'a_document_id',
})
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-searching]]
=== Searching

Now that some data is available, you can search your documents using the `search` API:

[source,js]
----
const result = await client.search({
  index: 'books',
  query: {
    match: {
      author: 'ray bradbury'
    }
  }
})
console.log(result.hits.hits)
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-updating-a-document]]
=== Updating a document

You can call the `update` API to update a document:

[source,js]
----
await client.update({
  index: 'books',
  id: 'a_document_id',
  doc: {
    author: 'S.E. Hinton',
    new_field: 'new value'
  }
})
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-deleting-a-document]]
=== Deleting a document

You can call the `delete` API to delete a document:

[source,js]
----
await client.delete({
  index: 'books',
  id: 'a_document_id',
})
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-deleting-an-index]]
=== Deleting an index

[source,js]
----
await client.indices.delete({ index: 'books' })
----

[discrete]
[[elasticsearch-nodejs-client-getting-started-typescript]]
== TypeScript

The Node.js client is implemented in TypeScript. IDEs that support
TypeScript-based autocompletion should automatically find and load the
appropriate declaration files in the package's `lib` directory.
The source TypeScript can also be
https://github.com/elastic/elasticsearch-serverless-js/tree/main/src[viewed on GitHub].
